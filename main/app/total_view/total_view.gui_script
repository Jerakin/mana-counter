local counters = require "main.app.counters"
local url = require "utils.url"
local gooey = require "gooey.gooey"
local history = require "main.app.total_view.history"
local screeninfo = require "utils.screeninfo"
local counter = require "main.app.counter_screen.counter_screen"
local gesture = require "in.gesture"
local theme = require "gooey-theme.theme"
local constants = require "main.app.constants"
local defsave = require("defsave.defsave")


local function update_list(list)
    for i,item in ipairs(list.items) do
        if item.data then
            local data = history.history[item.data]
            if data then
                local string = string.format("%-18s", data.time .. " " .. data.name)
                gui.set_text(item.nodes[hash("history_list/listitem_text")], string)
                gui.set_text(item.nodes[hash("history_list/listitem_text_end")], data.number)
            end
        end
    end
end

local function set_separator(self)
    local loaded_data = counters.loaded()
    local width = screeninfo.get_window_width() / #loaded_data
    local index = 0
    local p = gui.get_screen_position(self.sep)
    for n in pairs(loaded_data) do
        if loaded_data[n].is_default then
            index = index + 1
        end
    end
    p.x = width * index
    gui.set_screen_position(self.sep, p)
end

local function update_scale(node)
    local size = gui.get_size(node)
    local r = screeninfo.get_window_ratio()
    size.x = size.x * r.x
    gui.set_size(node, size)
end

function init(self)
    gui.set_render_order(2)
    url.set("total_view", msg.url("."))

    self.counter_text = gui.get_node("total_text")
    self.handle = gui.get_node("handle/bg")
    self.root = gui.get_node("root")
    self.sep = gui.get_node("sep")
    self.handle_pos = gui.get_position(self.handle)
    self.total_mana_max = 80
    self.history_max = 500
    self.touch = {y=0, open=0, old=0}
    set_separator(self)

    -- scale some gui elements
    update_scale(gui.get_node('sep'))
    update_scale(gui.get_node('detail_1'))
    update_scale(gui.get_node('detail_2'))
    gui.set_text(self.counter_text, counter.get_counter_sum())
    history.load()
end


function on_message(self, message_id, message, sender)
    if message_id == hash("update_total") then
        local settings = defsave.get(constants.SAVE_CONFIG, "settings")
        gui.set_text(self.counter_text, message.text)
        gui.set_text(gui.get_node("reset_mana_text"), settings.reset_custom and "Reset\nCounters" or "Reset\nMana" )
    elseif message_id == hash("minimise") then
        if self.touch.open then
            gui.animate(self.root, "position.y", 0, gui.EASING_INCUBIC, 0.3, 0, function() 
                self.touch.y = 0
                self.touch.open = 0
            end)
            msg.post(url.counter, "anim-down")
        end
    elseif message_id == hash("update_sep") then
        set_separator(self)
    end
end

function final(self)
    msg.post(url.counter, "anim-down")
end

local function update_drawer(self)
    if self.touch.open == self.touch.old then
        return
    end
    
    local new_y = 0
    if self.touch.open == 0 then
        new_y = 0
        msg.post(url.counter, "anim-down")
    elseif self.touch.open == 1 then
        msg.post(url.counter, "anim-up")
        new_y = self.total_mana_max
    elseif self.touch.open == 2 then
        new_y = self.history_max
    end
    self.touch.old = self.touch.open
    gui.animate(self.root, "position.y", new_y, gui.EASING_INCUBIC, 0.3, 0)
end


function on_input(self, action_id, action)
    if action_id ~= hash("touch") then
        return
    end
    local b = theme.button_icon("clear_counters", action_id, action, function()
        msg.post(url.counter, "reset")
    end)
    if b.pressed then
        return true
    end
    theme.button_icon("clear_history", action_id, action, function()
        history.clear()
    end)
    gooey.dynamic_list("history_list", "history_list/stencil", "history_list/listitem_bg", history.index, action_id, action, nil, nil, update_list)
    local g = gesture.on_input(self, action_id, action)
    if g then
        if g.swipe_up then
            self.touch.open = math.min(self.touch.open + 1, 2)
        elseif g.swipe_down then
            self.touch.open = math.max(self.touch.open - 1, 0)
        elseif g.tap then
            if self.touch.open == 2 then
                self.touch.open = 0
            end
        end
        update_drawer(self)
    end
    if gui.pick_node(self.root, action.x, action.y) then
        if self.touch.open == 1 then
            self.touch.open = 0
        end
        return true
    elseif self.touch.open == 2 then
        return true
    end
end
