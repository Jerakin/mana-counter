local monarch = require "monarch.monarch"
local counters = require "main.app.counters"
local url = require "utils.url"
local gooey = require "gooey.gooey"
local history = require "main.app.total_view.history"
local screeninfo = require "utils.screeninfo"

local function update_list(list)
    for i,item in ipairs(list.items) do
        if item.data then
            gui.set_text(item.nodes[hash("history_list/listitem_text")], item.data)
        end
    end
end

local function set_separator(self)
    local loaded_data = counters.loaded()
    local width = screeninfo.get_window_width() / #loaded_data
    local index = 0
    local p = gui.get_screen_position(self.sep)
    for n in pairs(loaded_data) do
        if loaded_data[n].is_default then
            index = index + 1
        end
    end
    p.x = width * index
    gui.set_screen_position(self.sep, p)
end

local function update_scale(node)
    local size = gui.get_size(node)
    local r = screeninfo.get_window_ratio()
    size.x = size.x * r.x
    gui.set_size(node, size)
end

function init(self)
    gui.set_render_order(2)
    url.set("total_view", msg.url("."))

    self.counter_text = gui.get_node("total_text")
    self.handle = gui.get_node("handle/bg")
    self.root = gui.get_node("root")
    self.sep = gui.get_node("sep")
    self.handle_pos = gui.get_position(self.handle)
    self.total_mana_max = 80
    self.history_max = 500
    self.touch = {y=0, open=0}
    set_separator(self)

    -- scale some gui elements
    update_scale(gui.get_node('sep'))
    update_scale(gui.get_node('detail_1'))
    update_scale(gui.get_node('detail_2'))
end


function on_message(self, message_id, message, sender)
    if message_id == hash("update_total") then
        gui.set_text(self.counter_text, message.text)
    elseif message_id == hash("minimise") then
        if self.touch.open then
            gui.animate(self.root, "position.y", 0, gui.EASING_INCUBIC, 0.3, 0, function() 
                self.touch.y = 0
                self.touch.open = 0
            end)
        end
    elseif message_id == hash("update_sep") then
        set_separator(self)
    end
end

local function minimize(self)
    gui.animate(self.root, "position.y", 0, gui.EASING_INCUBIC, 0.3, 0, function() 
        self.touch.y = 0
    end)
    self.touch.open = 0
    self.touch.pressed = false
    
end

local function update_handle(self, screen_x)
    -- Normal converstion doesn't want to work
    -- Doing this ugly hack of first setting the screen position
    -- so I can then get the normal position which will convert it for me
    local x = math.min(screen_x, screeninfo.get_window_width()-40)
    self.handle_pos.x = math.max(x, 40)
    gui.set_screen_position(self.handle, self.handle_pos)
    local local_x = gui.get_position(self.handle)
    gui.set_position(self.handle, vmath.vector3(local_x.x, 0, 0))
end

function on_input(self, action_id, action)
    gooey.dynamic_list("history_list", "history_list/stencil", "history_list/listitem_bg", history.history, action_id, action, nil, nil, update_list)
    if action.released then
        if action.touch then
            return
        end
        print(self.touch.open, self.touch.y)
        if self.touch.open == 0 and self.touch.y < self.total_mana_max-2 then
            minimize(self)
        elseif self.touch.open > 0 and self.touch.y < self.history_max-2 then
            minimize(self)
        elseif self.touch.open == 1 then
            self.touch.open = 2
        elseif  self.touch.open == 0 then
            self.touch.open = 1
        end
        self.touch.pressed = false
    end
    if gui.pick_node(self.handle, action.x, action.y) then
        if action.pressed then
            self.touch.pressed = true
        end
    end
    if self.touch.pressed then
        self.touch.start = gui.get_position(self.root)
        if self.touch.open == 0 then
            self.touch.y = math.max(math.min(self.touch.y + action.dy, self.total_mana_max), 0)
        else
            self.touch.y = math.max(math.min(self.touch.y + action.dy, self.history_max), 0)
        end

        local old = gui.get_position(self.root)
        old.y = self.touch.y
        gui.set_position(self.root, old)

        update_handle(self, action.screen_x)
        return true
    end
    if gui.pick_node(self.root, action.x, action.y) then
        return true
    end
end
