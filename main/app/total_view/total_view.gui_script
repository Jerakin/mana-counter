local monarch = require "monarch.monarch"
local counters = require "main.app.counters"
local url = require "utils.url"
local gooey = require "gooey.gooey"
local history = require "main.app.total_view.history"

local function update_list(list)
    for i,item in ipairs(list.items) do
        if item.data then
            gui.set_text(item.nodes[hash("history_list/listitem_text")], item.data)
        end
    end
end

local function set_separator(self)
    local loaded_data = counters.loaded()
    local width = gui.get_width() / #loaded_data

    local index = 0
    local p = gui.get_position(self.sep)
    for n in pairs(loaded_data) do
        
        if loaded_data[n].is_default then
            index = index + 1
        end
    end
    p.x = width * index
    gui.set_position(self.sep, p)
end

function init(self)
    msg.post(".", "acquire_input_focus")
    gui.set_render_order(2)
    url.set("total_view", msg.url("."))
    
    self.counter_text = gui.get_node("total_text")
    self.handle = gui.get_node("handle/bg")
    self.root = gui.get_node("root")
    self.sep = gui.get_node("sep")
    self.handle_pos = gui.get_position(self.handle)
    self.total_mana_max = 80
    self.history_max = 500
    self.touch = {y=0, open=false}
    set_separator(self)
end


function on_message(self, message_id, message, sender)
    if message_id == hash("update_total") then
        gui.set_text(self.counter_text, message.text)
    elseif message_id == hash("minimise") then
        if self.touch.open then
            gui.animate(self.root, "position.y", 0, gui.EASING_INCUBIC, 0.3, 0, function() 
                self.touch.y = 0
                self.touch.open = false
            end)
        end
    elseif message_id == hash("update_sep") then
        set_separator(self)
    end
end

local function minimize(self)
    gui.animate(self.root, "position.y", 0, gui.EASING_INCUBIC, 0.3, 0, function() 
        self.touch.y = 0 
    end)
    self.touch.pressed = false
    self.touch.open = 0
end

function on_input(self, action_id, action)
    gooey.dynamic_list("history_list", "history_list/stencil", "history_list/listitem_bg", history.history, action_id, action, nil, nil, update_list)
    
    if action.released then
        if self.touch.y < 78 then
            minimize(self)
        elseif self.touch.open > 0 and self.touch.y < self.history_max-2 then
            minimize(self)
        else
            local y = gui.get_position(self.root).y
            local stage = 0
            if self.touch.open == 1 then
                stage = 2
            else
                stage = 1
            end
            self.touch = {y=y, open=stage}
        end
    end
    if gui.pick_node(self.handle, action.x, action.y) then
        if action.pressed then
            self.touch.pressed = true
        end
    end
    if self.touch.pressed then
        if self.touch.open then
            self.touch.start = gui.get_position(self.root) --vmath.vector3(0, 80, 0)--gui.get_position(self.root)
        else
            self.touch.start = vmath.vector3(action.x, action.y, 0)
        end
        
        if self.touch.pressed then
            
            if self.touch.y < self.total_mana_max-2 then
                self.touch.open = 0
            end
            if self.touch.open == 0 then
                self.touch.y = math.max(math.min(self.touch.y + action.dy, self.total_mana_max), 0)
            else
                self.touch.y = math.max(math.min(self.touch.y + action.dy, self.history_max), 0)
            end

            local old = gui.get_position(self.root)
            old.y = self.touch.y
            gui.set_position(self.root, old)
        end
        self.handle_pos.x = math.max(math.min(action.x, 1100), 36)
        gui.set_position(self.handle, self.handle_pos)
    end
end
