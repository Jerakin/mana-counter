local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local theme = require "gooey-theme.theme"
local defsave = require("defsave.defsave")
local counter = require "main.app.counter_screen.counter"
local url = require "utils.url"


local function set_inital_state(data)
    for i in pairs(data) do
        theme.checkbox(string.lower(data[i].name)).set_checked(data[i].enabled)
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    url.set("settings", msg.url("."))
    gui.set_render_order(1)
    local counter = defsave.get("config", "counter")
    set_inital_state(counter)
    
    local settings = defsave.get("config", "settings")
    if settings == nil then
        settings = {negative=true}
        defsave.set("config", "settings", settings)
    end
    
    theme.checkbox("negative").set_checked(settings.negative)
    -- create transitions for the node 'root'
    -- the node will slide in/out from left and right with
    -- a specific easing, duration and delay
    --[[self.transition = transitions.create(gui.get_node("root"))
            .show_in(transitions.slide_in_top, gui.EASING_OUTQUAD, 1, 0)
            .show_out(transitions.slide_out_top, gui.EASING_INQUAD, 1, 0)
            .back_in(transitions.slide_in_top, gui.EASING_OUTQUAD, 1, 0)
            .back_out(transitions.slide_out_top, gui.EASING_INQUAD, 1, 0)
            --]]
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    --self.transition.handle(message_id, message, sender)
    -- you can also check when a transition has completed:
    if message_id == monarch.TRANSITION.DONE and message.transition == monarch.TRANSITION.SHOW_IN then
        print("Show in done!")
    end
end

local function set_visible(name, visible)
    local counter = defsave.get("config", "counter")
    local set = false
    for i in pairs(counter) do
        if counter[i].name == name then
            set = true
            counter[i].enabled = visible
        end
    end
    if set == false then
        table.insert(counter, {name=name, enabled=visible})
    end
    defsave.set("config", "counter", counter)
    defsave.save("config")
end

function on_input(self, action_id, action)
    theme.checkbox("white", action_id, action, function(checkbox)
        set_visible("White", checkbox.checked)
    end)
    theme.checkbox("blue", action_id, action, function(checkbox)
        set_visible("Blue", checkbox.checked)
    end)
    theme.checkbox("black", action_id, action, function(checkbox)
        set_visible("Black", checkbox.checked)
    end)
    theme.checkbox("red", action_id, action, function(checkbox)
        set_visible("Red", checkbox.checked)
    end)
    theme.checkbox("green", action_id, action, function(checkbox)
        set_visible("Green", checkbox.checked)
    end)
    theme.checkbox("colorless", action_id, action, function(checkbox)
        set_visible("Colorless", checkbox.checked)
    end)
    theme.checkbox("negative", action_id, action, function(checkbox)
        local settings = defsave.get("config", "settings")
        print(checkbox.checked)
        settings.negative = checkbox.checked
        defsave.set("config", "settings", settings)
        defsave.save("config")
    end)
    theme.button("add", action_id, action, function()
        monarch.show("custom")
    end)
    theme.close_button("close", action_id, action, function()
        msg.post(url.counter, "reload_ui")
        monarch.back()
    end)
    return true
end

function on_reload(self)
end
