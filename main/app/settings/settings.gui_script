local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local theme = require "gooey-theme.theme"
local defsave = require("defsave.defsave")
local counters = require "main.app.counters"
local url = require "utils.url"

local function set_visible(name, visible)
    counters.set_visible(name, visible)
    msg.post(url.counter, "reload_ui")
end

local function clear_counters(self)
    for i in pairs(self.additional_counters) do
        gui.delete_node(self.additional_counters[i].node)
        gui.delete_node(self.additional_counters[i].delete)
    end
    self.additional_counters = {}
end

local function add_counters(self)
    local all_data = counters.all()
    local index = 0
    for i in pairs(all_data) do
        local data = all_data[i]
        if data.is_default == nil then
            local pos = gui.get_position(self.template)
            local pos_del = gui.get_position(self.template_delete)
            pos.y = pos.y - 71.4 * index
            pos_del.y = pos_del.y - 71.4 * index

            local tree_del = gui.clone_tree(self.template_delete)
            gui.set_position(tree_del["template_delete/bg"], pos_del)
            gui.set_enabled(tree_del["template_delete/bg"], true)
            gui.set_id(tree_del["template_delete/bg"], data.name .. "_delete/bg")
            
            local tree = gui.clone_tree(self.template)
            gui.set_enabled(tree["template/box"], true)
            gui.set_position(tree["template/box"], pos)
            gui.set_text(tree["template/label"], data.name)
            gui.set_id(tree["template/box"], data.name .. "/box")
            table.insert(self.additional_counters, {name=data.name, node = tree["template/box"], delete=tree_del["template_delete/bg"]})
            index = index + 1
        end
    end
end

local function set_inital_state(self)
    clear_counters(self)
    add_counters(self)

    local data = counters.all()
    for i in pairs(data) do
        theme.checkbox(data[i].name).set_checked(data[i].enabled)
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    url.set("settings", msg.url("."))
    gui.set_render_order(1)

    self.template = gui.get_node("template/box")
    self.template_delete = gui.get_node("template_delete/bg")
    
    gui.set_enabled(self.template, false)
    gui.set_enabled(self.template_delete, false)
    
    self.additional_counters = {}
    local settings = defsave.get("config", "settings")
    
    theme.checkbox("negative").set_checked(settings.negative)
    self.transition = transitions.create(gui.get_node("root"))
            .show_in(transitions.slide_in_top, gui.EASING_OUTQUAD, .4, 0)
            .show_out(transitions.slide_out_top, gui.EASING_INQUAD, .4, 0)
            .back_in(transitions.slide_in_top, gui.EASING_OUTQUAD, .2, 0)
            .back_out(transitions.slide_out_top, gui.EASING_INQUAD, .2, 0)
            set_inital_state(self)
            gui.set_text(gui.get_node("version"), sys.get_config("project.version"))
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("reload_ui") then
        set_inital_state(self)
    end
    self.transition.handle(message_id, message, sender)
end

function on_input(self, action_id, action)
    theme.checkbox("White", action_id, action, function(checkbox)
        set_visible("White", checkbox.checked)
    end)
    theme.checkbox("Blue", action_id, action, function(checkbox)
        set_visible("Blue", checkbox.checked)
    end)
    theme.checkbox("Black", action_id, action, function(checkbox)
        set_visible("Black", checkbox.checked)
    end)
    theme.checkbox("Red", action_id, action, function(checkbox)
        set_visible("Red", checkbox.checked)
    end)
    theme.checkbox("Green", action_id, action, function(checkbox)
        set_visible("Green", checkbox.checked)
    end)
    theme.checkbox("Colorless", action_id, action, function(checkbox)
        set_visible("Colorless", checkbox.checked)
    end)
    theme.checkbox("negative", action_id, action, function(checkbox)
        local settings = defsave.get("config", "settings")
        settings.negative = checkbox.checked
        defsave.set("config", "settings", settings)
        defsave.save("config")
    end)

    for i in pairs(self.additional_counters) do
        local data = self.additional_counters[i]
        theme.checkbox(data.name, action_id, action,function(checkbox)
            set_visible(data.name, checkbox.checked)
        end)
        theme.button(data.name .. "_delete", action_id, action, function(button)
            counters.delete(data.name)
            set_inital_state(self)
        end)
        
    end
    if counters.number_of_custom() < 5 then
        theme.button("add", action_id, action, function()
            monarch.show("custom")
        end)
    end 
    theme.button("close", action_id, action, function()
        msg.post(url.total_view, "update_sep")
        msg.post(url.counter, "reload_ui")
        monarch.back()
    end)
    theme.button("info", action_id, action, function()
        monarch.show("info")
    end)
    return true
end

function on_reload(self)
end
