local gooey = require "gooey.gooey"
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local theme = require "gooey-theme.theme"
local defsave = require("defsave.defsave")
local url = require "utils.url"
local constants = require "main.app.constants"
local gesture = require "in.gesture"
local counters = require "main.app.counters"
local w3c = require "color.w3c"

local POSITION = {}
local SELECTED_ICON = nil
local SELECTED_COLOR = nil
local ICON_PREVIEW = nil

local function update_listitem(list, item)
    local pos = gui.get_position(item.root)
    if item == list.selected_item then
        for i=1, 3 do
            local sprite_node = item.nodes[hash("icon_list/item_" .. i)]
            if gui.pick_node(sprite_node, POSITION.x, POSITION.y) then
                list.selected_item = nil
                SELECTED_ICON = item.data[i]
            end
        end
    end
end

local function update_dynamic_icon_list(list)
    for _,item in ipairs(list.items) do
        update_listitem(list, item)
        for i=1, 3 do
            local sprite_node = item.nodes[hash("icon_list/item_" .. i)]
            gui.play_flipbook(sprite_node, item.data[i])
            if item.data[i] == SELECTED_ICON then
                gui.set_color(sprite_node, vmath.vector3(0))
            else
                gui.set_color(sprite_node, vmath.vector3(1))
            end
        end
    end
end

local function randomize_colors()
    local keyset = {}
    for k in pairs(w3c) do
        table.insert(keyset, w3c[k])
    end
    for i=1, 16 do
        local color_node = gui.get_node(hash("color_" .. i))
        gui.set_color(color_node, keyset[math.random(#keyset)])
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    url.set("custom", msg.url("."))
    gui.set_render_order(2)
    ICON_PREVIEW = gui.get_node("selected_item")

    self.icon_data = {}
    local t = {}
    for i in pairs(constants.icons) do
        if #t == 3 then
            table.insert(self.icon_data, t)
            t = {}
        end
        table.insert(t, constants.icons[i])
    end

    self.transition = transitions.create(gui.get_node("root"))
        .show_in(transitions.slide_in_top, gui.EASING_OUTQUAD, .4, 0)
        .show_out(transitions.slide_out_top, gui.EASING_INQUAD, .4, 0)
        .back_in(transitions.slide_in_top, gui.EASING_OUTQUAD, .2, 0)
        .back_out(transitions.slide_out_top, gui.EASING_INQUAD, .2, 0)
    
    update_dynamic_icon_list(theme.dynamic_icon_list("icon_list", "scroll", self.icon_data, nil, {x=0, y=0}))
end


function on_message(self, message_id, message, sender)
    self.transition.handle(message_id, message, sender)
end


function on_input(self, action_id, action)
    POSITION.x = action.x
    POSITION.y = action.y
    theme.dynamic_icon_list("icon_list", "scroll", self.icon_data, action_id, action, {}, function()end, update_dynamic_icon_list)
    
    theme.button("close", action_id, action, function()
        monarch.back()
    end)
    theme.button_icon("random", action_id, action, function()
        randomize_colors()
    end)
    theme.button("add", action_id, action, function()
        local icon = SELECTED_ICON
        
        local name = gui.get_text(gui.get_node("name/text"))
        if icon ~= nil and SELECTED_COLOR ~= nil and #name >=3 then
            local color = gui.get_color(SELECTED_COLOR)
            local could_add = counters.add(name, {color=color, texture=icon})
            if could_add then
                msg.post(url.settings, "reload_ui")
                msg.post(url.counter, "reload_ui")
                monarch.back()
            end
        end
    end)
    
    theme.input("name", gui.KEYBOARD_TYPE_DEFAULT, action_id, action)
    local g = gesture.on_input(self, action_id, action)
    if g then
        if g.tap then
            for i=1, 16 do
                local color_node = gui.get_node(hash("color_" .. i))
                if gui.pick_node(color_node, action.x, action.y) then
                    if SELECTED_COLOR ~= nil then
                        gui.set_scale(SELECTED_COLOR, vmath.vector3(1))
                    end
                    SELECTED_COLOR = color_node
                    
                    gui.set_scale(color_node, vmath.vector3(1.25))
                end
            end
        end
    end
    return true
end

function on_reload(self)
    randomize_colors()
end
